// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error)
	GetcodeStream(ctx context.Context, opts ...grpc.CallOption) (ApiService_GetcodeStreamClient, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetCode(ctx context.Context, in *GetCodeRequest, opts ...grpc.CallOption) (*GetCodeResponse, error) {
	out := new(GetCodeResponse)
	err := c.cc.Invoke(ctx, "/api.ApiService/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetcodeStream(ctx context.Context, opts ...grpc.CallOption) (ApiService_GetcodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], "/api.ApiService/GetcodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceGetcodeStreamClient{stream}
	return x, nil
}

type ApiService_GetcodeStreamClient interface {
	Send(*GetCodeRequest) error
	Recv() (*GetCodeResponse, error)
	grpc.ClientStream
}

type apiServiceGetcodeStreamClient struct {
	grpc.ClientStream
}

func (x *apiServiceGetcodeStreamClient) Send(m *GetCodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiServiceGetcodeStreamClient) Recv() (*GetCodeResponse, error) {
	m := new(GetCodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	GetCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error)
	GetcodeStream(ApiService_GetcodeStreamServer) error
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) GetCode(context.Context, *GetCodeRequest) (*GetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (UnimplementedApiServiceServer) GetcodeStream(ApiService_GetcodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetcodeStream not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCode(ctx, req.(*GetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetcodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServiceServer).GetcodeStream(&apiServiceGetcodeStreamServer{stream})
}

type ApiService_GetcodeStreamServer interface {
	Send(*GetCodeResponse) error
	Recv() (*GetCodeRequest, error)
	grpc.ServerStream
}

type apiServiceGetcodeStreamServer struct {
	grpc.ServerStream
}

func (x *apiServiceGetcodeStreamServer) Send(m *GetCodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiServiceGetcodeStreamServer) Recv() (*GetCodeRequest, error) {
	m := new(GetCodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCode",
			Handler:    _ApiService_GetCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetcodeStream",
			Handler:       _ApiService_GetcodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
