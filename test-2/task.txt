Задание #2

К письму приложен маленький проектик с базовым кодом, чтобы не тратить на него время.
Есть сущность Record, ее внутренности не важны - просто какой-то набор данных + метод для генерации этих Record'ов.
Есть RecordGenerator - он с каким то интервалом генерит рандомные Record'ы.
Есть RecordProcessor - mock, который должен превратиться в обработчик Record'ов.
Есть главная функция, которая все это запускает.

Что нужно сделать:
Абстрактная задача заключается в следующем - мы создаем записи с данными, которые нужно обязательно обработать через какой-то конкретный промежуток времени. Этот промежуток времени заранее неизвестен и определяется в runtime'е (в коде выбирается рандомный интервал от 1 до 30 сек с точностью до мс).

Нужно написать код, который будет управлять передачей этих записей на обработку (без использования сторонних бибилиотек). Т.е. этот код должен позволять:
- при генерации записи - запускать таймаут для этих записей/передавать их в некий scheduler/что-то еще в зависимости от варианта реализации
- по окончании таймаута - передавать записи на обработку/уведомить о необходимости обработки/что-то еще в зависимости от варианта реализации

Далее нужно дополнить RecordProcessor так, чтобы сразу после окончания таймаута он получал и обрабатывал записи -> считал сумму значений поля Value из каждого Record, который попал на обработку (смысла в этом нету, просто чтобы было какое-то действие). В конце перед выходом нужно вывести сумму, собранную на момент остановки программы.

Также считаем, что после обработки Record'ы нам больше не нужны, и их можно удалять.

Что нужно учесть:
- записи могут генерироваться в разных потоках, их кол-во не ограничено (в mock'е main функции 2 потока)
- идеальная точность срабатывания не нужна, можно ограничиться точностью в пределах 100мс, т.е. если у записи стоит таймаут 3500 мс, то она должна попасть в обработку не раньше, чем через 3500 мс после генерации и не позже, чем через 3600 мс
- нужны минимальное потребление процессора и максимальная пропускная способность; считаем, что количество генерируемых записей может исчисляться миллионами в секунду
- при запуске проекта с флагом `-race` не должно возникать ошибок

Можно менять/убирать любой код, добавлять конструкторы, примитивы синхронизации, каналы для синхронизации/передачи данных и т.п., можно добавить package level обработчик, можно сделать все в main пакете. В общем, любой вариант на усмотрение исполнителя - главное, чтобы присутствовала нужна логика.

На код стайл и качество кода этого проекта не обращайте внимания - все написано так, чтобы было минимальное кол-во функций и они не отвлекали от сути.

